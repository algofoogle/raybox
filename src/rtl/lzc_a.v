/*** lzc_a: Leading Zeroes Counter, type A

This is a dumb LZC that uses a giant casez statement to count leading zeroes.

See also: lzc_b, _c, and _d.

This type was found to run fast in Verilator, and work OK in Quartus for my DE0-Nano (Cyclone IV) FPGA board.
You will need to adjust it to make it suit your required bit depth (both on input and output),
especially given that the bit depth actually changes not just the ports, but also the actual
result (i.e. the number of leading zeroes is a function of the input width).

I don't know what this synthesises to, but I suspect it will have poor timing
compared to smarter segmented methods (e.g. lzc_d). See also:
https://electronics.stackexchange.com/questions/196914/verilog-synthesize-high-speed-leading-zero-count

NOTE: output (lzc_cnt) is 7 bits wide, because I'm working on the assumption that supporting up to
64-bit inputs might be required, and hence the count output needs to range from 0..64, which requires
7 bits.

NOTE: I think this implementation is very slightly different from the one that I know worked last time:
https://github.com/algofoogle/raybox/blob/9f90eaacf36cd570768db4671596c5f70f85460e/src/rtl/lzc.v
...the only real differences here are:
1.  the input bit range here is [31:0], but in that other commit it was [15:-16].
2.  This outputs 7 bits, i.e. [6:0], but the other version outputs only 6, i.e. [5:0].

***/

`undef SZ
`define SZ  32  //SMELL: This should match WIDTH.

module lzc_a #(
    parameter WIDTH=`SZ
)(
    input   [WIDTH-1:0] i_data,
    output  [6:0]       lzc_cnt     // 0..64, but this design only tries to go up to 32 bits for now.
);

    function [6:0] f_lzc(input [WIDTH-1:0] data);
        if (WIDTH>32 || WIDTH<1) begin
            $error("lzc_a module only designed to support 1..32 inputs but you want: %1d", WIDTH);
        end
        if (WIDTH!=`SZ) begin
            $error("lzc_a module is currently hardcoded to expect a WIDTH of %1d, but you want: %1d", `SZ, WIDTH);
        end

        casez(data)
            `SZ'b0:                                 f_lzc = 32;
            `SZ'b1:                                 f_lzc = 31;
            `SZ'b1?:                                f_lzc = 30;
            `SZ'b1??:                               f_lzc = 29;
            `SZ'b1???:                              f_lzc = 28;
            `SZ'b1????:                             f_lzc = 27;
            `SZ'b1?????:                            f_lzc = 26;
            `SZ'b1??????:                           f_lzc = 25;
            `SZ'b1???????:                          f_lzc = 24;
            `SZ'b1????????:                         f_lzc = 23;
            `SZ'b1?????????:                        f_lzc = 22;
            `SZ'b1??????????:                       f_lzc = 21;
            `SZ'b1???????????:                      f_lzc = 20;
            `SZ'b1????????????:                     f_lzc = 19;
            `SZ'b1?????????????:                    f_lzc = 18;
            `SZ'b1??????????????:                   f_lzc = 17;
            `SZ'b1???????????????:                  f_lzc = 16;
            `SZ'b1????????????????:                 f_lzc = 15;
            `SZ'b1?????????????????:                f_lzc = 14;
            `SZ'b1??????????????????:               f_lzc = 13;
            `SZ'b1???????????????????:              f_lzc = 12;
            `SZ'b1????????????????????:             f_lzc = 11;
            `SZ'b1?????????????????????:            f_lzc = 10;
            `SZ'b1??????????????????????:           f_lzc = 9;
            `SZ'b1???????????????????????:          f_lzc = 8;
            `SZ'b1????????????????????????:         f_lzc = 7;
            `SZ'b1?????????????????????????:        f_lzc = 6;
            `SZ'b1??????????????????????????:       f_lzc = 5;
            `SZ'b1???????????????????????????:      f_lzc = 4;
            `SZ'b1????????????????????????????:     f_lzc = 3;
            `SZ'b1?????????????????????????????:    f_lzc = 2;
            `SZ'b1??????????????????????????????:   f_lzc = 1;
            default:                                f_lzc = 0;
        endcase

    endfunction

    assign lzc_cnt = f_lzc(i_data);

endmodule
